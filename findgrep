#!/bin/bash


# Author : Okemawo Aniyikaiye Obaodfin (OAO)
# Date : 03 November 2023
# Description : Recursively searches files in and below a given directory (by default, the current directory) for a
#               specified regular expression. By default, the search will examine only C and C++ files—that is,
#               those that end in .c, .cpp, h, or .hpp—but this can be overridden via command line options.


# save the name of the script in a variable
SCRIPT_NAME=`basename $0`


# These variables are intialted to default but will change when their respective associated flags are initaited
# MATCH varies from 0 to 4 based on the flag or options for typrs of files to search in.
# CASE VARIES FROM 0 to 1 based on the if the option "-i" is used or not
# DIR is used to store the directory with respect to the --top option

MATCH=0
CASE=0
DIR="./"




# usage is a function used to give users a message informing them the right way to execute the findgrep command
# it is executed whenever an incorrect command is issued or when an incorrect pattern is detected

usage () {
    echo " $SCRIPT_NAME [options] <egrep-pattern>                                                                                   "
    echo "                                                                                                                               "
    echo " Recursively searches files in and below a given directory (by default, the current directory) for a                           "
    echo " specified regular expression. By default, the search will examine only C and C++                                              "
    echo " those that end in .c, .cpp, h, or .hpp—but this can be overridden via command line options.                                   "
    echo "                                                                                                                               "
    echo " <egrep-pattern> is an extended regular expression as used by grep -E.                                                         "
    echo "                                                                                                                               "
    echo " Options can be one or more of:                                                                                                "
    echo "                                                                                                                               "
    echo "       --c                     Python mode: search files ending in .py, .json, and .xml                                        "
    echo "       --py                    Python mode: search files ending in .py, .json, and .xml                                        "
    echo "       --text                  Text mode: search files ending in .txt, .texi, .md, or beginning with the
name README.    "
    echo "       --all                   Look at all files, not just C/C++ files                                                         "
    echo "       --help                  Print this usage message and exit                                                               "
    echo "       -i | --insensitive      Perform case insensitive search (default is case sensitive)                                     "
    echo "       --top                   Set the root directory of the search; default is cwd                                            "
    echo "       --up                    Set the root of the search to parent of cwd; equivalent to “--top=..”                           "
    echo "                                                                                                                               "
}



# inc_exp or incorrect expression is a function that is called whenever there is an error with the pattern supplied or
# when the pattern suppllied cannot be found in any of the files. It executes instructions for bothe respective events
# exit code 2 for pattern not found, and exit code 1 for an error

inc_exp () {
    [ "$?" -eq 2 ] && echo "PLEASE ENTER A VALID EXPRESSION TO GREP" && usage && exit 1
    [ "$?" -eq 1 ] && exit 0
    [ "$?" -eq 3 ] && exit 1
}





# find grep is the core function of the findgrep command and it uses the find command with grep to locate the patterns in the file
# find is used to locate the specific files to be searched in then the output is piped to the egrep command to satisfy the requirements of
# the pattern to be searched . It displays a coloured output for the colour to be matched as well as the line number.
# the function calls differnt custom versions of the find and egrep combination based on the options supplied

findgrep () {

# A switch block to execute the find and egrep commands on the options passed for the file types to be searched
    case "$MATCH" in

        0)
# An inner case block to execute commands based on the -i option presence or absence
            case "$CASE" in
                0)
                    find "$DIR" -type f \( -name "*.cpp" -o -name "*.c" -o -name "*.h" -o -name "*.hpp" \) -print0 | xargs -0 egrep --color=auto -n "$1" || inc_exp
                    ;;
                1)
                    find "$DIR" -type f \( -name "*.cpp" -o -name "*.c" -o -name "*.h" -o -name "*.hpp" \) -print0 | xargs -0 egrep --color=auto -i -n "$1" || inc_exp
                    ;;
            esac
            ;;

        1)
# An inner case block to execute commands based on the -i option presence or absence
            case "$CASE" in
                0)
                    find "$DIR" -type f \( -name "*.py" -o -name "*.json" -o -name "*.xml" \) -print0 | xargs -0 egrep --color=auto -n "$1" || inc_exp
                    ;;
                1)
                    find "$DIR" -type f \( -name "*.py" -o -name "*.json" -o -name "*.xml" \) -print0 | xargs -0 egrep --color=auto -i -n "$1" || inc_exp                                    ;;
            esac
            ;;

        2)
# An inner case block to execute commands based on the -i option presence or absence
            case "$CASE" in
                0)
                    find "$DIR" -type f \( -name "*.txt" -o -name "*.texi" -o -name "*.md" -o -name "README.*" \) -print0 | xargs -0 egrep --color=auto -n "$1" || inc_exp
                    ;;
                1)
                    find "$DIR" -type f \( -name "*.txt" -o -name "*.texi" -o -name "*.md" -o -name "README.*" \) -print0 | xargs -0 egrep --color=auto -i -n "$1" || inc_exp
                    ;;
            esac
            ;;

        3)
# An inner case block to execute commands based on the -i option presence or absence
            case "$CASE" in
                0)
                    find "$DIR" -type f -name "*" -print0 | xargs -0 egrep --color=auto -n "$1" || inc_exp
                    ;;
                1)
                    find "$DIR" -type f -name "*" -print0 | xargs -0 egrep --color=auto -i -n "$1" || inc_exp
            esac
            ;;

    esac

    exit 0
}
# end of switch block






# This expression checks if the arguements suppled to the findgrep command is zero
# it displays a helpful error message and then executes the usage function if there were not arguements or pattern supplied

[ $# -eq 0 ] && echo "PLEASE ENTER A VALID EXPRESSION TO GREP"  && usage && exit 1




# This is a while loop that repeatedly runs while the arguements are available to the command. it has an inner switch block that checks
# if the next arguement is an option then carries out assignment on the MATCH variable declared above, therafter it shifts
# to the next positional arguement and reiterates the loop until the next arguement is anyhting other than what was captured in the switch statements.

while [ $# -ne 0 ] ; do
# inner switch block that matches arguemtns to flags or options
     case "$1" in
        --help)
            usage && exit 0
            ;;

        --c)
            MATCH=0
            shift
            ;;

        --py)
            MATCH=1
            shift
            ;;

        --text)
            MATCH=2
            shift
            ;;

        --all)
            MATCH=3
            shift
            ;;

        -i |--insensitive)
            CASE=1
            shift
            ;;

        --top)
            shift
            DIR="$1"
            shift
            ;;

        --top=*)
            DIR="${1##*=}"
            shift
            ;;

        --up)
            DIR="../"
            shift
            ;;

        *)  break
            ;;

    esac

done
# end of switch block



# This executes the findgrep function and then passes the value of the last positional arguement to the function.
findgrep "$1"
